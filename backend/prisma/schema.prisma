generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievements {
  achievementid          Int                  @id(map: "pk_achievements")
  achievementname        String?              @db.VarChar(100)
  achievementdescription String?              @db.VarChar
  users_achievements     users_achievements[]
}

model avatars {
  avatarurl  String? @db.VarChar(200)
  avatarname String? @db.VarChar(100)
  avatarid   Int     @id(map: "pk_avatars")
}

model chat {
  chatid    Int        @id(map: "pk_chatchannel")
  type      Int        @default(0)
  password  String?    @db.VarChar(100)
  chat_type chat_type  @relation(fields: [type], references: [typeid], onDelete: Cascade, map: "fk_chat_chat_type")
  user_chat user_chat?
}

model chat_type {
  typeid   Int     @id(map: "pk_chat_type")
  typename String? @db.VarChar(100)
  chat     chat[]
}

model friends {
  requesterid                      String            @db.VarChar(8)
  addresseeid                      String            @db.VarChar(8)
  statuscode                       String?           @db.Char(1)
  friendship_codes                 friendship_codes? @relation(fields: [statuscode], references: [statuscode], onDelete: Cascade, map: "fk_friends_friendship_codes")
  users_friends_requesteridTousers users             @relation("friends_requesteridTousers", fields: [requesterid], references: [userid], onDelete: Cascade, map: "fk_friends_users")
  users_friends_addresseeidTousers users             @relation("friends_addresseeidTousers", fields: [addresseeid], references: [userid], onDelete: Cascade, map: "fk_friends_users_0")

  @@unique([requesterid, addresseeid], map: "unq_friends")
}

model friendship_codes {
  statuscode String    @id(map: "pk_friendship_codes") @db.Char(1)
  statusname String?   @db.VarChar(100)
  friends    friends[]
}

model match_history {
  match_status                                          Int
  matchid                                               Int          @id(map: "pk_match_history") @default(autoincrement())
  match_status_match_history_match_statusTomatch_status match_status @relation("match_history_match_statusTomatch_status", fields: [match_status], references: [statuscode], onDelete: Cascade, map: "fk_match_history_match_status")
  user_match                                            user_match[]
}

model online_status {
  statusname String? @db.VarChar(100)
  statuscode Int     @id(map: "pk_online_status")
  users      users[]
}

model user_chat {
  userid           String?          @db.VarChar(8)
  chatid           Int              @id(map: "pk_user_chat")
  status           Int
  time             Int              @default(0)
  chat             chat             @relation(fields: [chatid], references: [chatid], onDelete: Cascade, map: "fk_user_chat_chat")
  user_status_chat user_status_chat @relation(fields: [status], references: [statusid], onDelete: Cascade, map: "fk_user_chat_user_status_chat")
  users            users?           @relation(fields: [userid], references: [userid], onDelete: Cascade, map: "fk_user_chat_users")
}

model user_match {
  userid           String           @db.VarChar(8)
  matchid          Int
  user_score       Int              @default(0)
  challenge        Int              @default(0)
  timeout          DateTime?        @db.Timestamp(6)
  challenge_status challenge_status @relation(fields: [challenge], references: [statuscode], onDelete: Cascade, map: "fk_user_match_challenge_status")
  match_history    match_history    @relation(fields: [matchid], references: [matchid], onDelete: Cascade, map: "fk_user_match_match_history")
  users            users            @relation(fields: [userid], references: [userid], onDelete: NoAction, map: "fk_user_match_users")

  @@unique([matchid, userid], map: "unq_user_match_matchid")
}

model user_status_chat {
  statusid   Int         @id(map: "pk_user_status_chat")
  statusname String?     @db.VarChar(100)
  user_chat  user_chat[]
}

model users {
  userid                             String               @id(map: "pk_users") @db.VarChar(8)
  username                           String?              @db.VarChar(100)
  avatar                             String?              @db.VarChar(100)
  twofa                              Int                  @default(0)
  created                            DateTime             @default(now()) @db.Timestamp(6)
  user_status                        Int                  @default(0)
  profilepic42                       String?              @db.VarChar(200)
  avatar                             Int                  @default(42)
  twofasecret                        String?              @db.VarChar(100)
  access_token                       String?              @db.VarChar(100)
  chat_messages                      chat_messages[]
  friends_friends_requesteridTousers friends[]            @relation("friends_requesteridTousers")
  friends_friends_addresseeidTousers friends[]            @relation("friends_addresseeidTousers")
  user_chat                          user_chat[]
  user_match                         user_match[]
  online_status                      online_status        @relation(fields: [user_status], references: [statuscode], onDelete: Cascade, map: "fk_users_online_status")
  users_achievements                 users_achievements[]
  userstats                          userstats?
}

model users_achievements {
  userid        String?       @db.VarChar(8)
  achievementid Int?
  id            Int           @id(map: "pk_users_achievements")
  achievements  achievements? @relation(fields: [achievementid], references: [achievementid], onDelete: Cascade, map: "fk_users_achievements_achievements")
  users         users?        @relation(fields: [userid], references: [userid], onDelete: Cascade, map: "fk_users_achievements_users")
}

model userstats {
  userid String @id(map: "pk_userstats") @db.VarChar(8)
  wins   Int?
  losses Int?
  users  users  @relation(fields: [userid], references: [userid], onDelete: Cascade, map: "fk_userstats_users")
}
